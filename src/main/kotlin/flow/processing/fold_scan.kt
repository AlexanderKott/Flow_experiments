package flow.processing

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*


/**
 *  fold – это в аккумулятор (память), с помощью которой как-то обрабатываются значения.
 * Например все складываются в память и получается сумма, или все вычитаются.  Отдает какое-то
 * одно значения в конце из всего потока. Это терминальный оператор.
 *
 *  scan – промежуточный оператор, который работает по принципу fold, но он отдает каждое новое
 * значение сразу на лету, а не только результат как это делает fold. Не терминальный оператор.
 *
 * Типичный случай использования scan — это когда у нас есть поток обновлений или изменений,
 * и нам нужен объект, являющийся результатом этих изменений.
 */
suspend fun main3() {
    val list = flowOf(1, 2, 3, 4)
        .onEach { delay(300) }
       .fold(0) { acc, i -> acc - i }
    println(list)
}

suspend fun main() {
    flowOf(1, 2, 3, 4)
        .onEach { delay(300) }
        .scan(0) { acc, v -> acc + v }
        .collect { println(it) }
}
