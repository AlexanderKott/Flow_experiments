package flow.combine

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

/**
zip – склеивание пар элементов из двух разных потоков в одно значение. Значения, не получившие пару – теряются.
Поэтому если одни фло короче другого, значения из длинного фло потеряются. Если фло работают с разной скоростью,
то они друг друга ждут и пары все равно смогут образоваться в одно значение. Порядок прихода элементов гарантируется.
Поток завершается кода первый из них поток завершается.
 */
suspend fun main() {
    val flow1 = flowOf(1, 2, 3, 4, 5 ,6)
        .onEach { delay(1000) }

    val flow2 = flowOf(1, 2, 3 )


    flow1.zip(flow2) { f1, f2 -> f1 * f2 } //или "${f1}_${f2}"
        .onCompletion { println("end ") }
        .collect { println(it) }
}

